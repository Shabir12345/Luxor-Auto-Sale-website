// Prisma Schema for Luxor Auto Sales
// PostgreSQL Database

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  passwordHash  String
  role          UserRole  @default(STAFF)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  
  vehicles      Vehicle[]
  activityLogs  ActivityLog[]
  
  @@index([email])
  @@map("users")
}

enum UserRole {
  OWNER
  STAFF
  VIEWER
}

// Vehicle Inventory
model Vehicle {
  id              String          @id @default(cuid())
  
  // Basic Info
  vin             String          @unique
  stockNumber     String?         @unique
  year            Int
  make            String
  model           String
  trim            String?
  bodyType        BodyType?
  
  // Technical Specs
  drivetrain      Drivetrain?
  fuelType        FuelType?
  transmission    Transmission?
  engine          String?
  cylinders       Int?
  odometerKm      Int
  
  // Pricing & Status
  priceCents      Int             // Store in cents to avoid float issues
  status          VehicleStatus   @default(AVAILABLE)
  
  // Appearance
  exteriorColor   String?
  interiorColor   String?
  
  // Content
  title           String
  description     String?         @db.Text
  seoSlug         String          @unique
  
  // Metadata
  publishedAt     DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  createdById     String
  createdBy       User            @relation(fields: [createdById], references: [id])
  
  // Relations
  photos          VehiclePhoto[]
  features        VehicleFeature[]
  
  @@index([status, make, model])
  @@index([priceCents])
  @@index([year])
  @@index([odometerKm])
  @@index([createdAt])
  @@index([seoSlug])
  @@map("vehicles")
}

enum VehicleStatus {
  AVAILABLE
  PENDING
  SOLD
  DRAFT
}

enum BodyType {
  SEDAN
  COUPE
  HATCHBACK
  WAGON
  SUV
  TRUCK
  VAN
  CONVERTIBLE
  OTHER
}

enum Drivetrain {
  FWD
  RWD
  AWD
  FOUR_WD
}

enum FuelType {
  GASOLINE
  DIESEL
  HYBRID
  ELECTRIC
  PLUG_IN_HYBRID
}

enum Transmission {
  AUTOMATIC
  MANUAL
  CVT
  DCT
}

// Vehicle Photos
model VehiclePhoto {
  id          String   @id @default(cuid())
  vehicleId   String
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  
  url         String
  altText     String?
  sortOrder   Int      @default(0)
  isPrimary   Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([vehicleId, sortOrder])
  @@map("vehicle_photos")
}

// Vehicle Features
model VehicleFeature {
  id          String   @id @default(cuid())
  vehicleId   String
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  
  category    String   // e.g., "Safety", "Comfort", "Technology"
  feature     String   // e.g., "Backup Camera", "Leather Seats", "Bluetooth"
  
  createdAt   DateTime @default(now())
  
  @@index([vehicleId])
  @@map("vehicle_features")
}

// Activity Logging
model ActivityLog {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  action      String   // e.g., "CREATED_VEHICLE", "UPDATED_VEHICLE", "DELETED_VEHICLE"
  entityType  String   // e.g., "VEHICLE", "USER", "PHOTO"
  entityId    String?
  details     Json?
  ipAddress   String?
  userAgent   String?
  
  createdAt   DateTime @default(now())
  
  @@index([userId, createdAt])
  @@index([entityType, entityId])
  @@map("activity_logs")
}

